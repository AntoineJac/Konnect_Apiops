# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
     - master
  pull_request:
    types:
      - opened
      - synchronize

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-customer-api:
    name: Deploy Customer API to Gateway and Dev Portal
    runs-on: macos-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Backup Insomnia Spec
        run: |
          mkdir ./spec-backup
          cp ./.insomnia/ApiSpec/*.yml ./spec-backup
          ls ./spec-backup            
      #Installing the inso, deck and portal cli
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Install Deck  
        run: |
          brew tap kong/deck
          brew install deck
      - name: Install inso
        run: brew install inso
          
      # Get Dev Portal EU ID
      - name: Get Dev Portal EU ID
      - run: |
          portalEuId=$( curl 'https://eu.api.konghq.com/konnect-api/api/portals' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' | jq -r '.data[].id' )
          echo "PORTAL_EU_ID=$portalEuId" >> $GITHUB_ENV
        
      # Push Dev Portal EU changes
      - name: Dev Portal EU change
        run: |
          curl -X 'PATCH' 'https://eu.api.konghq.com/konnect-api/api/portals/${{ env.PORTAL_EU_ID }}' \
          -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' \
          -H 'content-type: application/json' \
          -d @./portal/spec_EU.json

      # API Spec linting
      - name: Validate specification
        run: inso lint spec test_Siemens_Swagger
      
      # Generate declarative config
      - name: Generate declarative config
        run: |
          inso generate config test_Siemens_Swagger --tags test_Siemens_Swagger --output kong.yaml
          deck convert --from kong-gateway-2.x --to kong-gateway-3.x --input-file kong.yaml --output-file konnect.yaml
          cat konnect.yaml
      
      # Ping the Kong instance
      # Sync to Konnect
      - name: Update Kong
        run: |
          deck ping --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://eu.api.konghq.com" && deck sync --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://eu.api.konghq.com" --konnect-runtime-group-name "Siemens_ApiOps" -s konnect.yaml > sync.outputEU.txt
          #deck ping --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://us.api.konghq.com" && deck sync --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://us.api.konghq.com" --konnect-runtime-group-name "Siemens_ApiOps" -s konnect.yaml > sync.outputUS.txt

      # Prepare test spec             
      - name: Prepare URL 4 Test file
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/Environment/*.yml"]'
        env:
          KONG_PROXY_EU_URL: '${{ secrets.KONG_PROXY_EU_URL }}'
      # Run tests
      - name: Run test suites
        run: inso run test test_Siemens_Swagger -e ${{ env.TARGET_ENVIRONMENT }} --verbose
        env:
          TARGET_ENVIRONMENT: EU_Environement
